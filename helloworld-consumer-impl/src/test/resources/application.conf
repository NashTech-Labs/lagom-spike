#
# Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>
#

play.crypto.secret = whatever
play.application.loader = sample.helloworldconsumer.impl.HelloConsumerLoader

brokers = ${lagom.broker.defaults.kafka.brokers}

cassandra {
  contact-point = ${?contact-point}
  ## list the contact points for production here
  contact-points = ["localhost"]
  ## override Lagomâ€™s ServiceLocator-based ConfigSessionProvider
  session-provider = akka.persistence.cassandra.ConfigSessionProvider
}

akka.cluster {
  downing-provider-class = "com.lightbend.akka.sbr.SplitBrainResolverProvider"
  split-brain-resolver {
    # Select one of the available strategies (see descriptions below):
    # static-quorum, keep-majority, keep-oldest, keep-referee
    # if left "off" when the downing provider is enabled cluster startup will fail.
    active-strategy = keep-majority
    keep-majority {
      # if the 'role' is defined the decision is based only on members with that 'role'
      role = ""
    }
    # Time margin after which shards or singletons that belonged to a downed/removed
    # partition are created in surviving partition. The purpose of this margin is that
    # in case of a network partition the persistent actors in the non-surviving partitions
    # must be stopped before corresponding persistent actors are started somewhere else.
    # This is useful if you implement downing strategies that handle network partitions,
    # e.g. by keeping the larger side of the partition and shutting down the smaller side.
    # Decision is taken by the strategy when there has been no membership or
    # reachability changes for this duration, i.e. the cluster state is stable.
    stable-after = 10s
  }
}

akka.coordinated-shutdown.exit-jvm = on